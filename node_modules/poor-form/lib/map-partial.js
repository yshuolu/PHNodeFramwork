/*jshint strict:true node:true es5:true onevar:true laxcomma:true laxbreak:true eqeqeq:true immed:true latedef:true*/
(function () {
  "use strict";

  function MapSearch(pattern) {
    // TODO the pattern passed in should be <boundary>
    // but should not be \r\n--<boundary>\r\n
    // nor should it be \r\n--<boundary>--\r\n
    // this should somehow be smart enough to handle both *field start* and *form end* markers
    if (!Buffer.isBuffer(pattern)) {
      pattern = new Buffer(pattern);
    }

    var map = {}
      , i
      , item
      ;

    for (i = 0; i < pattern.length; i += 1) {
      item = pattern.get(i);

      if (!map[item]) {
        map[item] = [];
      }

      map[item].push(i);
    }

    this._map = map;
    this._pattern = pattern;
  }
  MapSearch.prototype.search = function (chunk) {
    var me = this
      , indexes
      , startIndex
      ;

    // see if the very last byte is even in the boundary
    // \r\n--all-boundaries-start-like-this-but-end[--]\r\n
    /*
    me._fieldStartBuf = new Buffer(CRLF + '--' + me._fieldStartBoundaryStr + CRLF);
    me._formEndBoundaryStr = new Buffer(CRLF + '--' + me._fieldStartBoundaryStr + '--' + CRLF);
    */

    indexes = 
      this._map[chunk.get([chunk.length - 1])] // \r
      ||
      this._map[chunk.get([chunk.length - 2])] // -
      ||
      this._map[chunk.get([chunk.length - 3])] // -
    ;

    // if it is, search forward from the first character
    // of the pattern until the last character of the buffer
    indexes.some(function (index) {
      var len = me._pattern.length - index
        , pos = chunk.length - len
        , i = 0
        ;

      // start at each possible start
      for (i = 0; i < len; i += 1) {
        if (me._pattern.get(i) !== chunk.get(pos + i)) {
          return false;
        }
        i += 1;
      }

      startIndex = pos;
      return true;
    });

    // TODO
    // handle STR + CRLF and STR + '--' + CRLF
    // Field Start \r\n--this-is-the-boundary--\r\n
    // Form End \r\n--this-is-the-boundary\r\n
    // VALID
    //  \r\n--this-is-the-boundary--\r
    //  \r\n--this-is-the-boundary\r
    // INVALID
    //  \r\n--this-is-the-boundaryX
    //  \r\n--this-is-the-boundaryXX
    //  \r\n--this-is-the-boundaryXXX
    /*
    if (chunk.length - startIndex >= pattern.length - 3) {
    }
    */
    return startIndex;
  };
  MapSearch.create = function (pattern) {
    return new MapSearch(pattern);
  };

  module.exports.MapSearch = MapSearch;
}());
