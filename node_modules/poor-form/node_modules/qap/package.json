{
  "name": "qap",
  "version": "2.1.0",
  "description": "Qap is a quick parser optimized for string/buffer patterns (<= 255 chars/buffers).",
  "homepage": "https://github.com/rootslab/qap",
  "repository": {
    "type": "git",
    "url": "git://github.com/rootslab/qap.git"
  },
  "keywords": [
    "parser",
    "quicksearch"
  ],
  "tags": [
    "parser",
    "quicksearch",
    "pattern matching"
  ],
  "author": {
    "name": "Guglielmo Ferri",
    "email": "44gatti@gmail.com"
  },
  "dependencies": {},
  "main": "index",
  "engines": {
    "node": ">=0.4.x"
  },
  "scripts": {
    "test": "bash test/run.sh"
  },
  "readme": "###QuickParser \n[![build status](https://secure.travis-ci.org/rootslab/qap.png)](http://travis-ci.org/rootslab/qap)\n * Qap is a quick parser for string or buffer patterns. \n * It is optimized for using with pattern strings <= 255 chars/bytes.\n * Better results are achieved with long and sparse patterns.\n * It is an implementation of QuickSearch algorithm :\n * http://www-igm.univ-mlv.fr/~lecroq/string/node19.html#SECTION00190\n\n###Install\n```bash\n$ npm install qap [-g]\n```\n###Run Tests\n\n```javascript\n$cd qap/\n$npm test\n```\n###Signatures\n\n> Create an instance with a Buffer or String pattern. \n\n```javascript\nQap( String pattern )\nQap( Buffer pattern )\n```\n\n> List all pattern occurrences into a String or Buffer data.\n> It returns an array of indexes.\n\n```javascript\n// slower with String\nQap.parse( String data, [ Number startFromIndex ], [ Number limitResultsTo ] ) : []\n// faster with Buffer\nQap.parse( Buffer data, [ Number startFromIndex ], [ Number limitResultsTo ] ) : []\n```\n\n> Change the pattern with a Buffer or String\n\n```javascript\nQap.setPattern( String anotherPattern )\nQap.setPattern( Buffer anotherPattern )\n```\n\n###Usage Example\n\n```javascript\nvar assert = require( 'assert' ),\n    QuickParser = require( './qap' ).QuickParser, // or Qap\n    pattern = 'hellofolks\\r\\n\\r\\n',\n    text = 'hehe' + pattern +'loremipsumhellofolks\\r\\n' + pattern;\n\n// create a Qap instance that parses the pattern\nvar qap = QuickParser( pattern ),\n\t// parse data from beginning\n\tresults = qap.parse( text );\n\n// change pattern with a buffer\nqap.setPattern( new Buffer( pattern ) );\n\n// re-parse data passing a Buffer instance instead of a String\nvar bresults = qap.parse( new Buffer( text ) );\n\n// results are the same\nassert.deepEqual( results, bresults );\n\n// parser results ( starting indexes ) [ 4, 40 ]\nconsole.log( results, bresults );\n```\n\n####Benchmark for small patterns is very fast\n\n```bash\n  $ node bench/small-pattern-data-rate\n```\nfor default :\n\n> - uses a pattern string of 57 bytes/chars\n> - builds a data buffer of 700 MB in memory\n> - uses a redundancy factor for pattern strings. The bigger the value, \nthe lesser are occurrences of pattern string into the text buffer. ( range: [1,5] )\n\n **Custom Usage**:\n\n```bash\n  // with [NumberOfMegaBytes] [GapFactor] [patternString]\n  $ node bench/data-rate.js 700 4 \"that'sallfolks\"\n```\n\n####Benchmark for big patterns is very slow\n\n```bash\n  $ node bench/big-pattern-data-rate\n```\n\n> - it uses a pattern size of 2MB\n> - builds a data buffer of 100MB copying pattern 25 times\n",
  "readmeFilename": "Readme.md",
  "bugs": {
    "url": "https://github.com/rootslab/qap/issues"
  },
  "_id": "qap@2.1.0",
  "dist": {
    "shasum": "d50d0fe7cbb9d5d6d1c60f9425f82b16b641bb92"
  },
  "_from": "qap@2.1.x",
  "_resolved": "https://registry.npmjs.org/qap/-/qap-2.1.0.tgz"
}
